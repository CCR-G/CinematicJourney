import com.wizbii.cinematic.journey.domain.entity.TmdbMovieId;
import kotlin.Float;
import kotlin.Int;
import kotlinx.datetime.Instant;
import kotlinx.datetime.LocalDate;

CREATE TABLE tmdbMovieRecord (

    -- Identifiers
    id INTEGER AS TmdbMovieId NOT NULL,
    language TEXT NOT NULL,

    -- TMDB Data
    backdropPath TEXT,
    fetchDate INTEGER AS Instant NOT NULL,
    overview TEXT,
    posterPath TEXT,
    releaseDate TEXT AS LocalDate NOT NULL,
    runtime INTEGER AS Int,
    tagline TEXT,
    title TEXT,
    voteAverage REAL AS Float,

    -- Keys
    PRIMARY KEY (id, language),
    FOREIGN KEY (id) REFERENCES movieRecord(tmdbId) ON DELETE CASCADE

);

createOrUpdateTmdbMovie {

    -- Updates if exists
    -- Does nothing if missing
    UPDATE tmdbMovieRecord
    SET backdropPath = :backdropPath,
        fetchDate = :fetchDate,
        overview = :overview,
        posterPath = :posterPath,
        releaseDate = :releaseDate,
        runtime = :runtime,
        tagline = :tagline,
        title = :title,
        voteAverage = :voteAverage
    WHERE id = :id
      AND language = :language;

    -- Inserts if missing
    -- Does nothing if exists
    INSERT OR IGNORE INTO tmdbMovieRecord(
        id,
        language,
        backdropPath,
        fetchDate,
        overview,
        posterPath,
        releaseDate,
        runtime,
        tagline,
        title,
        voteAverage
    )
    VALUES (
        :id,
        :language,
        :backdropPath,
        :fetchDate,
        :overview,
        :posterPath,
        :releaseDate,
        :runtime,
        :tagline,
        :title,
        :voteAverage
    );

}

readTmdbMovie:
    SELECT *
    FROM tmdbMovieRecord
    WHERE id = :id
      AND language = :language;

deleteTmdbMoviesOlderThan:
    DELETE FROM tmdbMovieRecord
    WHERE fetchDate < ?;
